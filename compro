#!/bin/bash

# Reference
# http://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script

#if OS is not Mac, exit or prepare pbcopy alternative

set -Ceu

##################################################################################
# Variables ######################################################################
##################################################################################

COMPRO_HOME=$(pwd)
TRASHBOX="$COMPRO_HOME/.trash"
contest=""
task=""
filename=""
declare -A config # init array
declare -A extension
declare -a languages

config=(
	[language]=""
	[template]=""
	[editor]=""
)

extension=(
	[C]="c"
	[C++]="cpp"
)

languages=(
	"C" "C++"
)

##################################################################################
# Functions ######################################################################
##################################################################################

commands() {
	echo "Commands:"
	(
		echo -e "  help-See this help"
		echo -e "  ls-Same as \`ls\` on bash, options are also allowed"
		echo -e "  contest-\033[4mdirname\033[m\tCreate (if needed) and change directory for the contest"
		echo -e "  task-\033[4mfilename\033[m\tCreate (if needed) and set file for the task"
		echo -e "  edit-Open editor to edit the file set in \`task\`"
		echo -e "  input-Set inputs from clipboard"
		echo -e "  run-Compile and run program with inputs"
		echo -e "  submit-Copy program to clipboard"
		echo -e "  delete-Delete current task"
		echo -e "  recovery-Revive latest deleted task"
		echo -e "  exit-Finish and exit"
	) | column -t -s -
}

conf() {
	if [[ -e .configure ]]; then
		while :
		do
			read -rp "File '.configure' is already exists. Would you like to configure again? [y/n] " answer
			case $answer in
				Y|y )
					break;;
				N|n )
					return;;
				* )
					;;
			esac
		done
	fi

	i=0;
	# input configure
	while [[ ! ${config[language]} ]]
	do
		echo -ne "\033[G\033[1M"
		echo -ne "Language(press up/down key) : \033[30;47m${languages[$i]}\033[m"
		read -rsn1 key
		if [[ "$key" == $'\x1b' ]]; then
			read -rsn2 rest
			key="$key$rest"
		fi
		case "$key" in
			$'\x1b\x5b\x41' ) # up key
				if [[ $i -gt 0 ]]; then
					i=$(echo $i - 1 | bc)
				fi;;
			$'\x1b\x5b\x42' ) # down key
				if [[ $i -lt $(expr ${#languages[@]} - 1) ]]; then
					i=$(echo $i + 1 | bc)
				fi;;
			"" ) # enter key
				config[language]=${languages[$i]}
				echo;;
		esac
	done
	echo -ne "\033[F\033[1M"
	echo "Language(press up/down key) : ${config[language]}"
	while :
	do
		read -rp "Template File (blank if not needed) : " config[template]
		if [[ -z "${config[template]}" ]] || [[ -e ${config[template]} ]]; then
			break;
		else
			echo "Error: file not found: ${config[template]}"
		fi
	done
	while :
	do
		echo -n "Editor"
		if [[ ! -z "${EDITOR-}" ]]; then
			echo -n " (blank if you use \$EDITOR:$EDITOR)"
		fi
		read -rp " : " config[editor]
		if [[ ! -z ${config[editor]-} ]] && [[ ! -e $(which "${config[editor]}") ]]; then
			echo "Error: ${config[editor]} does not exist."
			continue
		fi
		if [[ "${config[editor]}" ]] || [[ "${EDITOR-}" ]]; then
			break
		fi
	done

	# write .configure
	cat << EOF >| .configure
language=${config[language]}
template=${config[template]}
editor=${config[editor]}
EOF
}

include() {
	if [[ ! -e .configure ]]; then
		cat << EOF
Error: No '.configure' file in this directory.
Change directory which is already configured or run \`compro --conf\`.
EOF
		exit 1
	fi
	while read -r line
	do
		if echo "$line" | grep -F = &>/dev/null; then
			varname=$(echo "$line" | cut -d '=' -f 1)
			config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
		fi
	done < .configure
	if [[ "${config[template]}" ]] && [[ ! -e "${config[template]}" ]]; then
		cat << EOF
Error: Template file '${config[template]}' does not exist.
Create the file or initialize your configuration by \`compro --conf\`.
EOF
		exit 1
	fi
	if [[ ! ${EDITOR-} ]] && [[ ! "${config[editor]}" ]]; then
		cat << EOF
Error: No editor is set.
Export \$EDITOR or configure by \`compro --conf\`.
EOF
		exit 1
	fi
	if [[ "${config[editor]}" ]] && [[ ! -e $(which "${config[editor]}") ]]; then
		cat << EOF
Error: Editor '${config[editor]}' does not exist.
Configure by \`compro --conf\`.
EOF
		exit 1
	fi
}

contest() {
	# Check argc
	if [[ $# -ne 1 ]]; then
		exit 1
	fi
	if [[ $(pwd) != "$COMPRO_HOME" ]]; then
		cd "$COMPRO_HOME"
	fi
	if [[ ! -d "$1" ]]; then
		mkdir "$1"
	fi
	cd "$1"
	if [[ ! -d ".inputs" ]]; then
		mkdir .inputs
	fi
	contest="$1"
	task=""
	filename=""
}

task() {
	# Check argc
	if [[ $# -ne 1 ]]; then
		exit 1
	fi
	filename="$1"
	filename="${filename}.${extension[${config[language]}]}"
	if [[ ! -e "$filename" ]]; then
		if [[ "${config[template]}" ]] && [[ -e "$COMPRO_HOME/${config[template]}" ]]; then
			cp "$COMPRO_HOME/${config[template]}" "$filename"
		else
			touch "$filename"
		fi
	fi
	task="$1"
}

contest_is_set() {
	if [[ ! "$contest" ]]; then
		echo "Set the contest first."
		return 1
	else
		return 0
	fi
}

task_is_set() {
	if contest_is_set; then
		if [[ ! "$task" ]]; then
			echo "Set the task first."
			return 1
		else
			return 0
		fi
	else
		return 1
	fi
}

compile() {
	case "${config[language]}" in
		C )
			gcc -std=gnu11 -O2 -o .a.out "$filename" -lm;;
		C++ )
			g++ -std=gnu++03 -O2 -o .a.out "$filename";;
	esac
}

run() {
	case "${config[language]}" in
		C | C++ )
			./.a.out;;
	esac
}

delete() {
	case $1 in
		curtask )
			while :
			do
				read -rp "Are you sure to delete $task? [y/n] " confirm
				case "$confirm" in
					Y|y )
						rm -rf $TRASHBOX/*
						mkdir "$TRASHBOX/$contest"
						mv "$filename" "$TRASHBOX/$contest/."
						if [[ -e ".inputs/$task" ]]; then
							mkdir "$TRASHBOX/$contest/.inputs"
							mv ".inputs/$task" "$TRASHBOX/$contest/.inputs"
						fi
						echo "Successfully deleted $task!"
						task=""
						filename=""
						break;;
					N|n )
						return;;
					* )
						:;;
				esac
			done;;
		contest )
			if [[ ! -d "$COMPRO_HOME/$2" ]]; then
				echo "contest not found: $2"
				return
			fi
			while :
			do
				read -rp "Are you sure to delete $2? [y/n] " confirm
				case "$confirm" in
					Y|y )
						cd "$COMPRO_HOME"
						rm -rf $TRASHBOX/*
						mv $2 "$TRASHBOX/."
						if [[ "$contest" = "$2" ]]; then
							contest=""
							task=""
							filename=""
						else
							cd "$contest"
						fi
						echo "Successfully deleted $2!"
						break;;
					N|n )
						return;;
					* )
						:;;
				esac
			done;;
		task )
			if contest_is_set; then
				if [[ ! -e "$2.${extension[${config[language]}]}" ]]; then
					echo "task not found: $2"
					return
				fi
				while :
				do
					read -rp "Are you sure to delete $2? [y/n] " confirm
					case "$confirm" in
						Y|y )
							if [[ "$task" = "$2" ]]; then
								task=""
								filename=""
							fi
							rm -rf $TRASHBOX/*
							mkdir "$TRASHBOX/$contest"
							mv "$2.${extension[${config[language]}]}" "$TRASHBOX/$contest/."
							if [[ -e ".inputs/$2" ]]; then
								mkdir "$TRASHBOX/$contest/.inputs"
								mv ".inputs/$2" "$TRASHBOX/$contest/.inputs"
							fi
							echo "Successfully deleted $2!"
							break;;
						N|n )
							return;;
						* )
							:;;
					esac
				done
			fi;;
	esac
}

delete_usage() {
	echo    "Usage:delete"
	echo -e "      delete contest \033[4mcontestname\033[m"
	echo -e "      delete task \033[4mtaskname\033[m"
	echo "If contestname or taskname is not set, current task (if active) will be deleted."
}

recovery() {
	# If only one directory exists (due to a design, no more than one directory exist in a trashbox.)
	if [[ $(ls $TRASHBOX | wc -l) -eq 1 ]]; then 
		rsync -a "$TRASHBOX/" "$COMPRO_HOME"
		rm -rf $TRASHBOX/*
		echo "Successfully recovered!"
	else
		echo "Error: No recovery file."
	fi
}

##################################################################################
# Main ###########################################################################
##################################################################################

for OPT in "$@"
do
	case $OPT in
		--conf )
			conf
			exit;;
	esac
done

include

if [[ ! -d "$TRASHBOX" ]]; then
	mkdir "$TRASHBOX"
else
	rm -rf $TRASHBOX/*
fi
trap "rm -rf \"$TRASHBOX\"; exit 1" 1 2 3 15

cat << EOF

============================================================
   compro - An Assistant Tool for Competitive Programming
============================================================
Type \`help\` to list commands
Type \`exit\` to finish

EOF

while :
do
	# Prompt
	if [[ "$contest" ]]; then
		echo -en "\033[32m$contest\033[m"
	else
		echo -en "\033[31mContest\033[m"
	fi
	echo -n " > "
	if [[ "$task" ]]; then
		echo -en "\033[32m$task\033[m"
	else
		echo -en "\033[31mTask\033[m"
	fi
	echo -en " $ "

	# Command
	read -ra line
	if [[ -z ${line-} ]]; then
		continue;
	fi
	case "$line" in
		help|h )
			commands;;
		ls )
			"${line[@]}";;
		contest|c )
			if [[ ${#line[@]} -ne 2 ]]; then
				echo -e "Usage: contest \033[4mdirname\033[m"
				continue
			fi
			contest "${line[1]}";;
		task|t )
			if [[ ${#line[@]} -ne 2 ]]; then
				echo -e "Usage: task \033[4mfilename\033[m"
				continue
			fi
			if contest_is_set; then
				task "${line[1]}"
			fi;;
		edit|e )
			if task_is_set; then
				if [[ "${config[editor]}" ]]; then
					${config[editor]} "$filename"
				else
					$EDITOR "$filename"
				fi
			fi;;
		input|i )
			if task_is_set; then
				echo "Saving input from clip board..."
				pbpaste | tee ".inputs/$task" && (echo; echo "Input saved!")
			fi;;
		run|r )
			if task_is_set; then
				if [ ! -e ".inputs/$task" ]; then
					while :
					do
						read -rp "There is no input, are you sure to run? [y/n] " confirm
						case "$confirm" in
							Y|y )
								compile && (run; echo)
								break;;
							N|n )
								break;;
							* )
								continue;;
						esac
					done
				else
					compile && (run < ".inputs/$task"; echo)
				fi
			fi;;
		submit|s )
			if task_is_set; then
				pbcopy < "$filename" && echo "Program copied!"
			fi;;
		delete )
			if [[ ${#line[@]} -eq 3 ]]; then
				if [[ "${line[1]}" = "contest" ]] || [[ "${line[1]}" = "task" ]]; then
					delete "${line[1]}" "${line[2]}"
				else
					delete_usage
				fi
			elif [[ ${#line[@]} -eq 1 ]] && task_is_set > /dev/null ; then
				delete curtask
			else
				delete_usage
			fi;;
		recovery )
			recovery;;
		exit )
			rm -rf "$TRASHBOX"
			exit;;
		"" )
			;;
		* )
			echo "Error: Unknown command '$line'";;
	esac
done

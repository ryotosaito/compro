#!/bin/bash

# Reference
# http://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script

#if $EDITOR is not set, exit
#if OS is not Mac, exit or prepare pbcopy alternative

set -Ceu

declare -A config # init array

config=(
	[language]=""
	[template]=""
)

commands() {
	echo "Commands:"
	(
		echo -e "  help-See this help"
		echo -e "  contest-\033[4mdirname\033[m\tCreate (if needed) and change directory for the contest"
		echo -e "  task-\033[4mfilename\033[m\tCreate (if needed) and set file for the task"
		echo -e "  edit-Open editor and the file set"
		echo -e "  case-Set test case from clipboard"
		echo -e "  test-Compile and run program with test case"
		echo -e "  submit-Copy program to clipboard"
		echo -e "  exit-Finish and exit"
	) | column -t -s -
}

init() {
	if [[ -e .configure ]]; then
		while :
		do
			read -p "File '.configure' is already exists. Would you like to initialize? [y/n] " answer
			case $answer in
				Y|y )
					break;;
				N|n )
					return;;
				* )
					;;
			esac
		done
	fi

	# initialize
	# input configure
	while [[ ! ${config[language]} ]]
	do
		read -p "Language (C, etc.) : " config[language]
	done
	read -p "Template File (blank if not needed) : " config[template]

	# write .configure
	cat << EOF >| .configure
language=${config[language]}
template=${config[template]}
EOF
}

include() {
	if [[ ! -e .configure ]]; then
		cat << EOF
No '.configure' file in this directory.
Change directory which already configured or run \`compro --init\`.
EOF
		exit 1
	fi
	while read line
	do
		if echo $line | grep -F = &>/dev/null; then
			varname=$(echo "$line" | cut -d '=' -f 1)
			config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
		fi
	done < .configure
}

for OPT in "$@"
do
	case $OPT in
		--init )
			echo "init"
			init
			exit;;
	esac
done

include

cat << EOF

=============================================================
   compro - An Assistant Tools for Competitive Programming
=============================================================
Type \`help\` to list commands
Type \`exit\` to finish

EOF

while :
do
	echo -en "$ "
	read -a line
	case "$line" in
		help )
			commands;;
		contest )
			if [[ ${#line[@]} -lt 2 ]]; then
				echo -e "Usage: contest \033[4mdirname\033[m"
				continue
			fi
			echo ${line[1]};;
		task )
			if [[ ${#line[@]} -lt 2 ]]; then
				echo -e "Usage: task \033[4mfilename\033[m"
				continue
			fi
			echo ${line[1]};;
		edit )
			:;;
		case )
			:;;
		test )
			:;;
		submit )
			:;;
		exit )
			exit;;
		* )
			echo "Error: Unknown command '$line'";;
	esac
done

#!/bin/bash

# Reference
# http://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script

#if $EDITOR is not set, exit
#if OS is not Mac, exit or prepare pbcopy alternative

set -Ceu

COMPRO_HOME=$(pwd)
contest=""
task=""
declare -A config # init array

config=(
	[language]=""
	[template]=""
	[editor]=""
)

commands() {
	echo "Commands:"
	(
		echo -e "  help-See this help"
		echo -e "  ls-Same as \`ls\` on bash, options are also allowed"
		echo -e "  contest-\033[4mdirname\033[m\tCreate (if needed) and change directory for the contest"
		echo -e "  task-\033[4mfilename\033[m\tCreate (if needed) and set file for the task"
		echo -e "  edit-Open editor and the file set"
		echo -e "  input-Set test case from clipboard"
		echo -e "  run-Compile and run program with test case"
		echo -e "  submit-Copy program to clipboard"
		echo -e "  exit-Finish and exit"
	) | column -t -s -
}

init() {
	if [[ -e .configure ]]; then
		while :
		do
			read -rp "File '.configure' is already exists. Would you like to initialize? [y/n] " answer
			case $answer in
				Y|y )
					break;;
				N|n )
					return;;
				* )
					;;
			esac
		done
	fi

	# initialize
	# input configure
	while [[ ! ${config[language]} ]]
	do
		read -rp "Language (C, etc.) : " config[language]
	done
	read -rp "Template File (blank if not needed) : " config[template]
	while :
	do
		echo -n "Editor"
		if [[ "$EDITOR" ]]; then
			echo -n " (blank if you use \$EDITOR:$EDITOR)"
		fi
		read -rp " : " config[editor]
		if [[ "${config[editor]}" ]] && [[ ! -e $(which "${config[editor]}") ]]; then
			echo "Error: ${config[editor]} does not exist."
			continue
		fi
		if [[ "${config[editor]}" ]] || [[ "$EDITOR" ]]; then
			break
		fi
	done

	# write .configure
	cat << EOF >| .configure
language=${config[language]}
template=${config[template]}
editor=${config[editor]}
EOF
}

include() {
	if [[ ! -e .configure ]]; then
		cat << EOF
Error: No '.configure' file in this directory.
Change directory which is already configured or run \`compro --init\`.
EOF
		exit 1
	fi
	while read -r line
	do
		if echo "$line" | grep -F = &>/dev/null; then
			varname=$(echo "$line" | cut -d '=' -f 1)
			config[$varname]=$(echo "$line" | cut -d '=' -f 2-)
		fi
	done < .configure
	if [[ "${config[template]}" ]] && [[ ! -e "${config[template]}" ]]; then
		cat << EOF
Error: Template file '${config[template]}' does not exist.
Create the file or initialize your configuration by \`compro --init\`.
EOF
		exit 1
	fi
	if [[ ! "$EDITOR" ]] && [[ ! "${config[editor]}" ]]; then
		cat << EOF
Error: No editor is set.
Export $EDITOR or initialize your configuration by \`compro --init\`.
EOF
		exit 1
	fi
	if [[ "${config[editor]}" ]] && [[ ! -e $(which "${config[editor]}") ]]; then
		cat << EOF
Error: Editor '${config[editor]}' does not exist.
Initialize your configuration by \`compro --init\`.
EOF
		exit 1
	fi
}

contest() {
	# Check argc
	if [[ $# -ne 1 ]]; then
		exit 1
	fi
	if [[ $(pwd) != "$COMPRO_HOME" ]]; then
		cd "$COMPRO_HOME"
	fi
	if [[ ! -d "$1" ]]; then
		mkdir "$1"
	fi
	cd "$1"
	if [[ ! -d ".inputs" ]]; then
		mkdir .inputs
	fi
	contest="$1"
	task=""
}

task() {
	# Check argc
	if [[ $# -ne 1 ]]; then
		exit 1
	fi
	if [[ ! -e "$1" ]]; then
		if [[ "${config[template]}" ]] && [[ -e "$COMPRO_HOME/${config[template]}" ]]; then
			cp "$COMPRO_HOME/${config[template]}" "$1"
		else
			touch "$1"
		fi
	fi
	task="$1"
}

contest_is_set() {
	if [[ ! "$contest" ]]; then
		echo "Set the contest first."
		return 1
	else
		return 0
	fi
}

task_is_set() {
	if contest_is_set; then
		if [[ ! "$task" ]]; then
			echo "Set the task first."
			return 1
		else
			return 0
		fi
	else
		return 1
	fi
}

compile() {
	case "${config[language]}" in
		C )
			gcc -std=gnu11 -O2 -o .a.out "$task" -lm;;
	esac
}

run() {
	case "${config[language]}" in
		C )
			./.a.out;;
	esac
}

for OPT in "$@"
do
	case $OPT in
		--init )
			init
			exit;;
	esac
done

include

cat << EOF

=============================================================
   compro - An Assistant Tools for Competitive Programming
=============================================================
Type \`help\` to list commands
Type \`exit\` to finish

EOF

while :
do
	if [[ "$contest" ]]; then
		echo -n "$contest"
	else
		echo -en "\033[31mContest\033[m"
	fi
	echo -n " > "
	if [[ "$task" ]]; then
		echo -n "$task"
	else
		echo -en "\033[31mTask\033[m"
	fi
	echo -en " $ "
	read -ra line
	case "$line" in
		help )
			commands;;
		ls )
			"${line[@]}";;
		contest )
			if [[ ${#line[@]} -ne 2 ]]; then
				echo -e "Usage: contest \033[4mdirname\033[m"
				continue
			fi
			contest "${line[1]}";;
		task )
			if [[ ${#line[@]} -ne 2 ]]; then
				echo -e "Usage: task \033[4mfilename\033[m"
				continue
			fi
			if contest_is_set; then
				task "${line[1]}"
			fi;;
		edit )
			if task_is_set; then
				if [[ "${config[editor]}" ]]; then
					${config[editor]} "$task"
				else
					$EDITOR "$task"
				fi
			fi;;
		input )
			if task_is_set; then
				echo "Saving input from clip board..."
				pbpaste | tee ".inputs/$task" && (echo; echo "Input saved!")
			fi;;
		run )
			if task_is_set; then
				compile && (run < ".inputs/$task"; echo)
			fi;;
		submit )
			if task_is_set; then
				pbcopy < "$task" && echo "Program copied!"
			fi;;
		exit )
			exit;;
		* )
			echo "Error: Unknown command '$line'";;
	esac
done
